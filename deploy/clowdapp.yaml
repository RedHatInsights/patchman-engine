---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: patchman
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: patchman
  spec:
    envName: ${ENV_NAME}
    deployments:
    - name: admin
      minReplicas: ${{REPLICAS_ADMIN}}
      webServices:
        public:
          enabled: true
        private:
          enabled: false
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_ADMIN}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - admin
        env:
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_DATABASE_ADMIN}'}
        - {name: POD_CONFIG, value: '${ADMIN_CONFIG}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_ADMIN}', memory: '${RES_LIMIT_MEM_ADMIN}'}
          requests: {cpu: '${RES_REQUEST_CPU_ADMIN}', memory: '${RES_REQUEST_MEM_ADMIN}'}

    - name: manager
      minReplicas: ${{REPLICAS_MANAGER}}
      webServices:
        public:
          enabled: true
          apiPath: patch
        private:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_MANAGER}
        initContainers:
          - name: db-migration
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/entrypoint.sh
            env:
            - {name: LOG_LEVEL, value: '${LOG_LEVEL_DATABASE_ADMIN}'}
            - {name: DB_DEBUG, value: '${DB_DEBUG_DATABASE_ADMIN}'}
            - {name: GIN_MODE, value: '${GIN_MODE}'}
            - {name: SHOW_CLOWDER_VARS, value: ''}
            - {name: MANAGER_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                  key: manager-database-password}}}
            - {name: LISTENER_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                  key: listener-database-password}}}
            - {name: EVALUATOR_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                    key: evaluator-database-password}}}
            - {name: VMAAS_SYNC_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                    key: vmaas-sync-database-password}}}
            - {name: CYNDI_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                key: cyndi-database-password}}}
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - manager
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_MANAGER}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_MANAGER}'}
        - {name: DB_USER, value: manager}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: manager-database-password}}}
        - {name: DB_HOST_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.host,
                                                                  name: patchman-db-readonly}}}
        - {name: DB_PORT_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.port,
                                                                  name: patchman-db-readonly}}}
        - {name: CANDLEPIN_ADDRESS, value: '${CANDLEPIN_ADDRESS}'}
        - {name: CANDLEPIN_CERT, valueFrom: {secretKeyRef: {name: candlepin, key: cert}}}
        - {name: CANDLEPIN_KEY, valueFrom: {secretKeyRef: {name: candlepin, key: key}}}
        - {name: DB_READ_REPLICA_ENABLED, value: '${DB_READ_REPLICA_ENABLED}'}
        - {name: DB_WORK_MEM, value: '${DB_WORK_MEM}'}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: '${EVAL_TOPIC_MANAGER}'}
        - {name: RESPONSE_TIMEOUT, value: '${RESPONSE_TIMEOUT}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_MANAGER}'}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_MANAGER}'}
        - {name: MAX_REQUEST_BODY_SIZE, value: '${MAX_REQUEST_BODY_SIZE}'}
        - {name: MAX_HEADER_COUNT, value: '${MAX_HEADER_COUNT}'}
        - {name: MAX_GIN_CONNECTIONS, value: '${MAX_GIN_CONNECTIONS}'}
        - {name: RATELIMIT, value: '${RATELIMIT}'}
        - {name: LIMIT_PAGE_SIZE, value: '${LIMIT_PAGE_SIZE}'}
        - {name: POD_CONFIG, value: '${MANAGER_CONFIG}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_MANAGER}', memory: '${RES_LIMIT_MEM_MANAGER}'}
          requests: {cpu: '${RES_REQUEST_CPU_MANAGER}', memory: '${RES_REQUEST_MEM_MANAGER}'}

    - name: listener
      minReplicas: ${{REPLICAS_LISTENER}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_LISTENER}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - listener
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_LISTENER}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_LISTENER}'}
        - {name: DB_USER, value: listener}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                        key: listener-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVENTS_TOPIC, value: platform.inventory.events}
        - {name: EVAL_TOPIC, value: patchman.evaluator.upload}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: TEMPLATE_TOPIC, value: platform.content-sources.template}
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_LISTENER}'}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_LISTENER}'}
        - {name: POD_CONFIG, value: '${LISTENER_CONFIG}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_LISTENER}', memory: '${RES_LIMIT_MEM_LISTENER}'}
          requests: {cpu: '${RES_REQUEST_CPU_LISTENER}', memory: '${RES_REQUEST_MEM_LISTENER}'}

    - name: evaluator-upload
      minReplicas: ${{REPLICAS_EVALUATOR_UPLOAD}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_EVALUATOR_UPLOAD}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - evaluator
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_EVALUATOR_UPLOAD}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_EVALUATOR_UPLOAD}'}
        - {name: DB_USER, value: evaluator}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: evaluator-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.upload}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: REMEDIATIONS_UPDATE_TOPIC, value: 'platform.remediation-updates.patch'}
        - {name: NOTIFICATIONS_TOPIC, value: 'platform.notifications.ingress'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: GOGC, value: '${GOGC}'}  # set garbage collection limit for go 1.18
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_EVALUATOR_UPLOAD}'}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_EVALUATOR}'}
        - {name: POD_CONFIG, value: 'label=upload;${EVALUATOR_UPLOAD_CONFIG}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_EVALUATOR_UPLOAD}', memory: '${RES_LIMIT_MEM_EVALUATOR_UPLOAD}'}
          requests: {cpu: '${RES_REQUEST_CPU_EVALUATOR_UPLOAD}', memory: '${RES_REQUEST_MEM_EVALUATOR_UPLOAD}'}

    - name: evaluator-recalc
      minReplicas: ${{REPLICAS_EVALUATOR_RECALC}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_EVALUATOR_RECALC}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - evaluator
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_EVALUATOR_RECALC}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_EVALUATOR_RECALC}'}
        - {name: DB_USER, value: evaluator}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: evaluator-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: REMEDIATIONS_UPDATE_TOPIC, value: 'platform.remediation-updates.patch'}
        - {name: NOTIFICATIONS_TOPIC, value: 'platform.notifications.ingress'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: GOGC, value: '${GOGC}'}  # set garbage collection limit for go 1.18
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_EVALUATOR_RECALC}'}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_EVALUATOR}'}
        - {name: POD_CONFIG, value: 'label=recalc;payload_tracker=false;${EVALUATOR_RECALC_CONFIG}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_EVALUATOR_RECALC}', memory: '${RES_LIMIT_MEM_EVALUATOR_RECALC}'}
          requests: {cpu: '${RES_REQUEST_CPU_EVALUATOR_RECALC}', memory: '${RES_REQUEST_MEM_EVALUATOR_RECALC}'}

    jobs:
    - name: vmaas-sync
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${VMAAS_SYNC_SCHEDULE}
      suspend: ${{VMAAS_SYNC_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - vmaas_sync
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: vmaas-sync-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: PROMETHEUS_PUSHGATEWAY,value: '${PROMETHEUS_PUSHGATEWAY}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: GOMEMLIMIT, value: '${GOMEMLIMIT_VMAAS_SYNC}'}
        - {name: POD_CONFIG, value: '${JOBS_CONFIG}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_VMAAS_SYNC}', memory: '${RES_LIMIT_MEM_VMAAS_SYNC}'}
          requests: {cpu: '${RES_REQUEST_CPU_VMAAS_SYNC}', memory: '${RES_REQUEST_MEM_VMAAS_SYNC}'}

    - name: system-culling
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${CULLING_SCHEDULE}
      suspend: ${{CULLING_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - system_culling
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: PROMETHEUS_PUSHGATEWAY,value: '${PROMETHEUS_PUSHGATEWAY}'}
        - {name: POD_CONFIG, value: '${JOBS_CONFIG}'}

    - name: package-refresh
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${PKG_REFRESH_SCHEDULE}
      suspend: ${{PKG_REFRESH_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - packages_cache_refresh
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: DB_HOST_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.host,
                                                                  name: patchman-db-readonly}}}
        - {name: DB_PORT_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.port,
                                                                  name: patchman-db-readonly}}}
        - {name: DB_READ_REPLICA_ENABLED, value: '${DB_READ_REPLICA_ENABLED_JOBS}'}
        - {name: DB_WORK_MEM, value: '${DB_WORK_MEM}'}
        - {name: PROMETHEUS_PUSHGATEWAY,value: '${PROMETHEUS_PUSHGATEWAY}'}
        - {name: POD_CONFIG, value: '${JOBS_CONFIG}'}

    - name: advisory-refresh
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${ADVISORY_REFRESH_SCHEDULE}
      suspend: ${{ADVISORY_REFRESH_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - advisory_cache_refresh
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: POD_CONFIG, value: '${JOBS_CONFIG}'}

    - name: delete-unused
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${DELETE_UNUSED_SCHEDULE}
      suspend: ${{DELETE_UNUSED_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: POD_CONFIG, value: '${DATABASE_ADMIN_CONFIG}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - delete_unused
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: POD_CONFIG, value: '${JOBS_CONFIG}'}

    database:
      name: patchman
      version: 16

    kafkaTopics:
    - {replicas: 3, partitions: 10, topicName: platform.inventory.events}
    - {replicas: 3, partitions: 10, topicName: patchman.evaluator.upload}
    - {replicas: 3, partitions: 10, topicName: patchman.evaluator.recalc}
    - {replicas: 3, partitions: 8, topicName: platform.payload-status}
    - {replicas: 3, partitions: 10, topicName: platform.remediation-updates.patch}
    - {replicas: 3, partitions: 10, topicName: platform.notifications.ingress}
    - {replicas: 3, partitions: 10, topicName: platform.content-sources.template}

    dependencies:
    - host-inventory
    - rbac
    - vmaas
    - ingress
    - puptoo
    - content-sources-backend
    cyndi:
      enabled: true
      appName: patch
      insightsOnly: true
      additionalFilters:
        - name: "nonCentOS"
          type: "com.redhat.insights.kafka.connect.transforms.Filter"
          if: "!record.headers().lastWithName('os_name').value().match(/centos/i)"
          where: "COALESCE(system_profile_facts->'operating_system'->>'name', '') NOT ILIKE '%centos%'"
        - name: "excludedReporters"
          type: "com.redhat.insights.kafka.connect.transforms.Filter"
          if: "!record.headers().lastWithName('reporter').value().match(/^(yupana|satellite|discovery|rhsm-conduit)$/i)"
          where: "reporter NOT IN ('yupana', 'satellite', 'discovery', 'rhsm-conduit')"
    testing:
      iqePlugin: patchman

- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: patchman
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    logLevel: ${FLOORIST_LOGLEVEL}
    resources:
      limits:
        cpu: ${{RES_LIMIT_CPU_FLOORIST}}
        memory: ${{RES_LIMIT_MEM_FLOORIST}}
      requests:
        cpu: ${{RES_REQUEST_CPU_FLOORIST}}
        memory: ${{RES_REQUEST_MEM_FLOORIST}}
    queries:
      - prefix: insights/patch/advisories
        chunksize: ${{FLOORIST_CHUNKSIZE}}
        query: >-
          SELECT ra.name AS rh_account_id, am.name AS advisory_name, at.name AS advisory_type,
          count(sp.inventory_id) as applicable_systems
          FROM system_advisories sa
          JOIN system_platform sp ON sa.rh_account_id = sp.rh_account_id AND sa.system_id = sp.id
          JOIN inventory.hosts ih ON sp.inventory_id = ih.id
          JOIN advisory_metadata am ON sa.advisory_id = am.id
          JOIN rh_account ra ON ra.id = sa.rh_account_id
          JOIN advisory_type at ON am.advisory_type_id = at.id
          GROUP BY ra.name, am.name, at.name
          ORDER BY ra.name ASC, applicable_systems DESC;


- apiVersion: v1
  kind: Secret
  metadata:
    name: patchman-engine-database-passwords
    namespace: test  # namespace is overwritten by bonfire
  type: Opaque
  data:
    manager-database-password: bWFuYWdlcg== # manager
    listener-database-password: bGlzdGVuZXI= # listener
    evaluator-database-password: ZXZhbHVhdG9y # evaluator
    vmaas-sync-database-password: dm1hYXMtc3luYw== # vmaas-sync
    cyndi-database-password: Y3luZGk= # cyndi

- apiVersion: v1
  data:
    db.host: ""
    db.port: "MA=="
  kind: Secret
  metadata:
    name: patchman-db-readonly
    namespace: test  # namespace is overwritten by bonfire
  type: Opaque

parameters:
# Manager
- {name: REPLICAS_MANAGER, value: '1'}
- {name: IMAGE_TAG_MANAGER, value: v3.6.83}
- {name: LOG_LEVEL_MANAGER, value: debug}
- {name: DB_DEBUG_MANAGER, value: 'false'} # Log database queries if enabled
- {name: EVAL_TOPIC_MANAGER, value: patchman.evaluator.upload}
- {name: RES_LIMIT_CPU_MANAGER, value: 200m}
- {name: RES_LIMIT_MEM_MANAGER, value: 256Mi}
- {name: RES_REQUEST_CPU_MANAGER, value: 200m}
- {name: RES_REQUEST_MEM_MANAGER, value: 256Mi}
- {name: RESPONSE_TIMEOUT, value: '60'}
- {name: CANDLEPIN_ADDRESS, value: 'http://candlepin'}
- {name: DB_READ_REPLICA_ENABLED, value: 'TRUE'}
- {name: ENABLE_PROFILER_MANAGER, value: 'false'}
- {name: GOMEMLIMIT_MANAGER, value: '230MiB'} # set to 90% of the default memory limit 256Mi (don't forget `B`)
- {name: MAX_REQUEST_BODY_SIZE, value: '1048576'} # limit request body size, in bytes (default 1MB)
- {name: MAX_HEADER_COUNT, value: '50'} # limit number of request headers
- {name: MAX_GIN_CONNECTIONS, value: '50'}
- {name: RATELIMIT, value: '100'} # requests per second for leaky bucket rate limiter
- {name: LIMIT_PAGE_SIZE, value: 'true'}  # page size is limited to 100 items per page, set to `false` to use any limit
- {name: MANAGER_CONFIG, value: ''}

# Listener
- {name: REPLICAS_LISTENER, value: '1'}
- {name: IMAGE_TAG_LISTENER, value: v3.6.83}
- {name: LOG_LEVEL_LISTENER, value: debug}
- {name: DB_DEBUG_LISTENER, value: 'false'}
- {name: RES_LIMIT_CPU_LISTENER, value: 250m}
- {name: RES_LIMIT_MEM_LISTENER, value: 192Mi}
- {name: RES_REQUEST_CPU_LISTENER, value: 250m}
- {name: RES_REQUEST_MEM_LISTENER, value: 192Mi}
- {name: ENABLE_PROFILER_LISTENER, value: 'false'}
- {name: GOMEMLIMIT_LISTENER, value: '172MiB'} # set to 90% of the default memory limit 192Mi (don't forget `B`)
- {name: LISTENER_CONFIG, value: ''}

# Evaluator
- {name: GOGC, value: '100'}
- {name: GOMEMLIMIT_EVALUATOR, value: '922MiB'} # set to 90% of the default memory limit 1024Mi (don't forget `B`)

# Evaluator - upload
- {name: REPLICAS_EVALUATOR_UPLOAD, value: '1'}
- {name: IMAGE_TAG_EVALUATOR_UPLOAD, value: v3.6.83}
- {name: LOG_LEVEL_EVALUATOR_UPLOAD, value: debug}
- {name: DB_DEBUG_EVALUATOR_UPLOAD, value: 'false'}
- {name: RES_LIMIT_CPU_EVALUATOR_UPLOAD, value: 256m}
- {name: RES_LIMIT_MEM_EVALUATOR_UPLOAD, value: 1024Mi}
- {name: RES_REQUEST_CPU_EVALUATOR_UPLOAD, value: 256m}
- {name: RES_REQUEST_MEM_EVALUATOR_UPLOAD, value: 1024Mi}
- {name: ENABLE_PROFILER_EVALUATOR_UPLOAD, value: 'false'}
- {name: EVALUATOR_UPLOAD_CONFIG, value: ''}

# Evaluator - recalc
- {name: REPLICAS_EVALUATOR_RECALC, value: '1'}
- {name: IMAGE_TAG_EVALUATOR_RECALC, value: v3.6.83}
- {name: LOG_LEVEL_EVALUATOR_RECALC, value: debug}
- {name: DB_DEBUG_EVALUATOR_RECALC, value: 'false'}
- {name: RES_LIMIT_CPU_EVALUATOR_RECALC, value: 256m}
- {name: RES_LIMIT_MEM_EVALUATOR_RECALC, value: 1024Mi}
- {name: RES_REQUEST_CPU_EVALUATOR_RECALC, value: 256m}
- {name: RES_REQUEST_MEM_EVALUATOR_RECALC, value: 1024Mi}
- {name: ENABLE_PROFILER_EVALUATOR_RECALC, value: 'false'}
- {name: EVALUATOR_RECALC_CONFIG, value: ''}

# JOBS
- {name: IMAGE_TAG_JOBS, value: v3.6.83}
- {name: LOG_LEVEL_JOBS, value: debug}
- {name: DB_DEBUG_JOBS, value: 'false'}
- {name: JOBS_TIMEOUT, value: '1800'}  # 30 min timeout for jobs
- {name: PROMETHEUS_PUSHGATEWAY, required: true, value: "pushgateway"}
- {name: DB_READ_REPLICA_ENABLED_JOBS, value: 'TRUE'}
- {name: JOBS_CONFIG, value: ''}

# VMaaS sync
- {name: VMAAS_SYNC_SCHEDULE, value: '*/5 * * * *'} # Cronjob schedule definition
- {name: VMAAS_SYNC_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: RES_LIMIT_CPU_VMAAS_SYNC, value: 500m}
- {name: RES_LIMIT_MEM_VMAAS_SYNC, value: 384Mi}
- {name: RES_REQUEST_CPU_VMAAS_SYNC, value: 500m}
- {name: RES_REQUEST_MEM_VMAAS_SYNC, value: 384Mi}
- {name: GOMEMLIMIT_VMAAS_SYNC, value: '345MiB'} # set to 90% of the default memory limit 384Mi (don't forget `B`)
# Delete unused data
- {name: DELETE_UNUSED_SCHEDULE, value: '10 */6 * * *'} # Cronjob schedule definition
- {name: DELETE_UNUSED_SUSPEND, value: 'true'} # Disable cronjob execution
# System culling
- {name: CULLING_SCHEDULE, value: '*/10 * * * *'} # Cronjob schedule definition
- {name: CULLING_SUSPEND, value: 'false'} # Disable cronjob execution
# Cache refresh
- {name: PKG_REFRESH_SCHEDULE, value: '5 11-20/2 * * *'} # Cronjob schedule definition
- {name: PKG_REFRESH_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: ADVISORY_REFRESH_SCHEDULE, value: '*/15 * * * *'} # Cronjob schedule definition
- {name: ADVISORY_REFRESH_SUSPEND, value: 'false'} # Disable cronjob execution

# Database admin
- {name: IMAGE_TAG_DATABASE_ADMIN, value: v3.6.83}
- {name: LOG_LEVEL_DATABASE_ADMIN, value: debug}
- {name: DB_DEBUG_DATABASE_ADMIN, value: 'false'}
- {name: RES_LIMIT_CPU_DATABASE_ADMIN, value: 100m}
- {name: RES_LIMIT_MEM_DATABASE_ADMIN, value: 128Mi}
- {name: RES_REQUEST_CPU_DATABASE_ADMIN, value: 100m}
- {name: RES_REQUEST_MEM_DATABASE_ADMIN, value: 128Mi}
- {name: GOMEMLIMIT_DATABASE_ADMIN, value: '115MiB'} # set to 90% of the default memory limit 128Mi (don't forget `B`)
- {name: DATABASE_ADMIN_CONFIG, value: ''} # Set 'schema_version=XXX' if need specific database schema
                                           # 'force_schema_version=XXX' to reset the dirty flag to false and force the specific version, it will follow up with the schema upgrade defined by schema_version

# Common parameters
- {name: IMAGE, value: quay.io/cloudservices/patchman-engine-app}
- {name: ENV_NAME, required: false}
- {name: GIN_MODE, value: 'release'} # Gin webframework running mode
- {name: KAFKA_READER_MAX_ATTEMPTS, value: '3'} # Limit of how many attempts will be made before kafka read error.
- {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '10'} # Limit of how many attempts will be made before kafka write error.
- {name: SSL_CERT_DIR, value: '/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:/cdapp/certs'}
- {name: DB_WORK_MEM, value: '512000'} # How much memory can query use (used for packages queries) in kB - 500MB, postgres default is 4MB

# Turnpike
- {name: IMAGE_TAG_ADMIN, value: v3.6.83}
- {name: REPLICAS_ADMIN, value: '1'}
- {name: RES_LIMIT_CPU_ADMIN, value: 100m}
- {name: RES_LIMIT_MEM_ADMIN, value: 256Mi}
- {name: RES_REQUEST_CPU_ADMIN, value: 50m}
- {name: RES_REQUEST_MEM_ADMIN, value: 128Mi}
- {name: ADMIN_CONFIG, value: 'turnpike_auth'}

# Floorist parameters
- {name: FLOORIST_SUSPEND, value: 'true', required: true} # Disable Floorist cronjob execution
- {name: FLOORIST_BUCKET_SECRET_NAME, value: dummy-secret, required: true} # Bucket secret name
- {name: FLOORIST_DB_SECRET_NAME, value: patchman-db} # DB secret name
- {name: FLOORIST_LOGLEVEL, value: INFO} # Floorist loglevel config
- {name: FLOORIST_CHUNKSIZE, value: '1000000'}
- {name: RES_REQUEST_CPU_FLOORIST, value: 250m}
- {name: RES_REQUEST_MEM_FLOORIST, value: 1Gi}
- {name: RES_LIMIT_CPU_FLOORIST, value: 500m}
- {name: RES_LIMIT_MEM_FLOORIST, value: 2Gi}
