---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: patchman
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: patchman
  spec:
    envName: ${ENV_NAME}
    deployments:
    - name: admin
      minReplicas: ${{REPLICAS_ADMIN}}
      webServices:
        public:
          enabled: true
        private:
          enabled: false
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_ADMIN}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - admin
        env:
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_ADMIN}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: ENABLE_REPO_BASED_RE_EVALUATION, value: '${ENABLE_REPO_BASED_RE_EVALUATION}'}
        - {name: ENABLE_RECALC_MESSAGES_SEND, value: '${ENABLE_RECALC_MESSAGES_SEND}'}
        - {name: ENABLE_ADVISORIES_SYNC, value: '${ENABLE_ADVISORIES_SYNC}'}
        - {name: ENABLE_PACKAGES_SYNC, value: '${ENABLE_PACKAGES_SYNC}'}
        - {name: ENABLE_REPOS_SYNC, value: '${ENABLE_REPOS_SYNC}'}
        - {name: ENABLE_MODIFIED_SINCE_SYNC, value: '${ENABLE_MODIFIED_SINCE_SYNC}'}
        - {name: ERRATA_PAGE_SIZE, value: '${ERRATA_PAGE_SIZE}'}
        - {name: PACKAGES_PAGE_SIZE, value: '${PACKAGES_PAGE_SIZE}'}
        - {name: MSG_BATCH_SIZE, value: '${MSG_BATCH_SIZE}'}
        - {name: ENABLE_TURNPIKE_AUTH, value: '${ENABLE_TURNPIKE_AUTH}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_ADMIN}', memory: '${RES_LIMIT_MEM_ADMIN}'}
          requests: {cpu: '${RES_REQUEST_CPU_ADMIN}', memory: '${RES_REQUEST_MEM_ADMIN}'}

    - name: manager
      minReplicas: ${{REPLICAS_MANAGER}}
      webServices:
        public:
          enabled: true
          apiPath: patch
        private:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_MANAGER}
        initContainers:
          - name: db-migration
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/entrypoint.sh
            env:
            - {name: LOG_LEVEL, value: '${LOG_LEVEL_DATABASE_ADMIN}'}
            - {name: DB_DEBUG, value: '${DB_DEBUG_DATABASE_ADMIN}'}
            - {name: GIN_MODE, value: '${GIN_MODE}'}
            - {name: SHOW_CLOWDER_VARS, value: ''}
            - {name: SHOW_CLOWDER_VARS, value: ''}
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
            - {name: RESET_SCHEMA, value: '${RESET_SCHEMA}'}
            - {name: FORCE_SCHEMA_VERSION, value: '${FORCE_SCHEMA_VERSION}'}
            - {name: UPDATE_CYNDI_PASSWD, value: '${UPDATE_CYNDI_PASSWD}'}
            - {name: WAIT_FOR_DB, value: 'empty'}
            - {name: UPDATE_USERS, value: '${UPDATE_USERS}'}
            - {name: UPDATE_DB_CONFIG, value: '${UPDATE_DB_CONFIG}'}
            - {name: MANAGER_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                  key: manager-database-password}}}
            - {name: LISTENER_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                  key: listener-database-password}}}
            - {name: EVALUATOR_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                    key: evaluator-database-password}}}
            - {name: VMAAS_SYNC_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                    key: vmaas-sync-database-password}}}
            - {name: CYNDI_PASSWORD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                                key: cyndi-database-password}}}
        command:
          - ./scripts/entrypoint.sh
          - manager
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_MANAGER}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_MANAGER}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_MANAGER}'}
        - {name: DB_USER, value: manager}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: manager-database-password}}}
        - {name: DB_HOST_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.host,
                                                                  name: patchman-db-readonly}}}
        - {name: DB_PORT_READ_REPLICA, valueFrom: {secretKeyRef: {key: db.port,
                                                                  name: patchman-db-readonly}}}
        - {name: DB_READ_REPLICA_ENABLED, value: '${DB_READ_REPLICA_ENABLED}'}
        - {name: ENABLE_CYNDI_TAGS, value: '${ENABLE_CYNDI_TAGS}'}
        - {name: ENABLE_RBAC, value: '${ENABLE_RBAC}'}
        - {name: DISABLE_CACHE_COUNTS, value: '${DISABLE_CACHE_COUNTS}'}
        - {name: ENABLE_ADVISORY_DETAIL_CACHE, value: '${ENABLE_ADVISORY_DETAIL_CACHE}'}
        - {name: ADVISORY_DETAIL_CACHE_SIZE, value: '${ADVISORY_DETAIL_CACHE_SIZE}'}
        - {name: PRELOAD_ADVISORY_DETAIL_CACHE, value: '${PRELOAD_ADVISORY_DETAIL_CACHE}'}
        - {name: ENABLE_BASELINES_API, value: '${ENABLE_BASELINES_API}'}
        - {name: ENABLE_BASELINE_CHANGE_EVAL, value: '${ENABLE_BASELINE_CHANGE_EVAL}'}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: '${EVAL_TOPIC_MANAGER}'}
        - {name: ENABLE_PACKAGE_CACHE, value: '${ENABLE_PACKAGE_CACHE_MANAGER}'}
        - {name: RESPONSE_TIMEOUT, value: '${RESPONSE_TIMEOUT}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_MANAGER}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_MANAGER}', memory: '${RES_LIMIT_MEM_MANAGER}'}
          requests: {cpu: '${RES_REQUEST_CPU_MANAGER}', memory: '${RES_REQUEST_MEM_MANAGER}'}

    - name: listener
      minReplicas: ${{REPLICAS_LISTENER}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_LISTENER}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - listener
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_LISTENER}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_LISTENER}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_LISTENER}'}
        - {name: DB_USER, value: listener}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                        key: listener-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVENTS_TOPIC, value: platform.inventory.events}
        - {name: EVAL_TOPIC, value: patchman.evaluator.upload}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: CONSUMER_COUNT, value: '${CONSUMER_COUNT_LISTENER}'}
        - {name: ENABLE_BYPASS, value: '${ENABLE_BYPASS_LISTENER}'}
        - {name: EXCLUDED_REPORTERS, value: '${EXCLUDED_REPORTERS}'}
        - {name: EXCLUDED_HOST_TYPES, value: '${EXCLUDED_HOST_TYPES}'}
        - {name: ENABLE_PAYLOAD_TRACKER, value: '${ENABLE_PAYLOAD_TRACKER}'}
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_LISTENER}'}

        resources:
          limits: {cpu: '${RES_LIMIT_CPU_LISTENER}', memory: '${RES_LIMIT_MEM_LISTENER}'}
          requests: {cpu: '${RES_REQUEST_CPU_LISTENER}', memory: '${RES_REQUEST_MEM_LISTENER}'}

    - name: evaluator-upload
      minReplicas: ${{REPLICAS_EVALUATOR_UPLOAD}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_EVALUATOR_UPLOAD}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - evaluator
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_EVALUATOR_UPLOAD}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_EVALUATOR_UPLOAD}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_EVALUATOR_UPLOAD}'}
        - {name: DB_USER, value: evaluator}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: evaluator-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.upload}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: REMEDIATIONS_UPDATE_TOPIC, value: 'platform.remediation-updates.patch'}
        - {name: NOTIFICATIONS_TOPIC, value: 'platform.notifications.ingress'}
        - {name: EVAL_LABEL, value: upload}
        - {name: CONSUMER_COUNT, value: '${CONSUMER_COUNT_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_BYPASS, value: '${ENABLE_BYPASS_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_LAZY_PACKAGE_SAVE, value: '${ENABLE_LAZY_PACKAGE_SAVE_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_BASELINE_EVAL, value: '${ENABLE_BASELINE_EVAL_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_ADVISORY_ANALYSIS, value: '${ENABLE_ADVISORY_ANALYSIS_SAVE_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_PACKAGE_ANALYSIS, value: '${ENABLE_PACKAGE_ANALYSIS_SAVE_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_REPO_ANALYSIS, value: '${ENABLE_REPO_ANALYSIS_SAVE_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_STALE_SYSTEM_EVALUATION, value: '${ENABLE_STALE_SYSTEM_EVALUATION_SAVE_EVALUATOR_UPLOAD}'}
        - {name: ENABLE_PACKAGE_CACHE, value: '${ENABLE_PACKAGE_CACHE_EVALUATOR_UPLOAD}'}
        - {name: PRELOAD_PACKAGE_CACHE, value: '${PRELOAD_PACKAGE_CACHE_EVALUATOR_UPLOAD}'}
        - {name: PACKAGE_CACHE_SIZE, value: '${PACKAGE_CACHE_SIZE}'}
        - {name: PACKAGE_NAME_CACHE_SIZE, value: '${PACKAGE_NAME_CACHE_SIZE}'}
        - {name: ENABLE_VMAAS_CACHE, value: '${ENABLE_VMAAS_CACHE_EVALUATOR_UPLOAD}'}
        - {name: VMAAS_CACHE_SIZE, value: '${VMAAS_CACHE_SIZE}'}
        - {name: VMAAS_CALL_MAX_RETRIES, value: '${VMAAS_CALL_MAX_RETRIES}'}
        - {name: VMAAS_CALL_USE_EXP_RETRY, value: '${VMAAS_CALL_USE_EXP_RETRY}'}
        - {name: VMAAS_CALL_USE_OPTIMISTIC_UPDATES, value: '${VMAAS_CALL_USE_OPTIMISTIC_UPDATES}'}
        - {name: MSG_BATCH_SIZE, value: '${MSG_BATCH_SIZE}'}
        - {name: MAX_EVAL_GOROUTINES, value: '${MAX_EVAL_GOROUTINES_UPLOAD}'}
        - {name: ENABLE_PAYLOAD_TRACKER, value: '${ENABLE_PAYLOAD_TRACKER}'}
        - {name: ENABLE_INSTANT_NOTIFICATIONS, value: '${ENABLE_INSTANT_NOTIFICATIONS}'}
        - {name: USE_VMAAS_GO, value: '${USE_VMAAS_GO}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: GOGC, value: '${GOGC}'}  # set garbage collection limit for go 1.18
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_EVALUATOR_UPLOAD}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_EVALUATOR_UPLOAD}', memory: '${RES_LIMIT_MEM_EVALUATOR_UPLOAD}'}
          requests: {cpu: '${RES_REQUEST_CPU_EVALUATOR_UPLOAD}', memory: '${RES_REQUEST_MEM_EVALUATOR_UPLOAD}'}

    - name: evaluator-recalc
      minReplicas: ${{REPLICAS_EVALUATOR_RECALC}}
      webServices:
        public:
          enabled: true
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_EVALUATOR_RECALC}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - evaluator
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_EVALUATOR_RECALC}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_EVALUATOR_RECALC}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_EVALUATOR_RECALC}'}
        - {name: DB_USER, value: evaluator}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: evaluator-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_READER_MAX_ATTEMPTS, value: '${KAFKA_READER_MAX_ATTEMPTS}'}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: PAYLOAD_TRACKER_TOPIC, value: platform.payload-status}
        - {name: REMEDIATIONS_UPDATE_TOPIC, value: 'platform.remediation-updates.patch'}
        - {name: NOTIFICATIONS_TOPIC, value: 'platform.notifications.ingress'}
        - {name: EVAL_LABEL, value: recalc}
        - {name: CONSUMER_COUNT, value: '${CONSUMER_COUNT_EVALUATOR_RECALC}'}
        - {name: ENABLE_BYPASS, value: '${ENABLE_BYPASS_EVALUATOR_RECALC}'}
        - {name: ENABLE_LAZY_PACKAGE_SAVE, value: '${ENABLE_LAZY_PACKAGE_SAVE_EVALUATOR_RECALC}'}
        - {name: ENABLE_BASELINE_EVAL, value: '${ENABLE_BASELINE_EVAL_EVALUATOR_RECALC}'}
        - {name: ENABLE_ADVISORY_ANALYSIS, value: '${ENABLE_ADVISORY_ANALYSIS_SAVE_EVALUATOR_RECALC}'}
        - {name: ENABLE_PACKAGE_ANALYSIS, value: '${ENABLE_PACKAGE_ANALYSIS_SAVE_EVALUATOR_RECALC}'}
        - {name: ENABLE_REPO_ANALYSIS, value: '${ENABLE_REPO_ANALYSIS_SAVE_EVALUATOR_RECALC}'}
        - {name: ENABLE_STALE_SYSTEM_EVALUATION, value: '${ENABLE_STALE_SYSTEM_EVALUATION_SAVE_EVALUATOR_RECALC}'}
        - {name: ENABLE_PACKAGE_CACHE, value: '${ENABLE_PACKAGE_CACHE_EVALUATOR_RECALC}'}
        - {name: PRELOAD_PACKAGE_CACHE, value: '${PRELOAD_PACKAGE_CACHE_EVALUATOR_RECALC}'}
        - {name: PACKAGE_CACHE_SIZE, value: '${PACKAGE_CACHE_SIZE}'}
        - {name: PACKAGE_NAME_CACHE_SIZE, value: '${PACKAGE_NAME_CACHE_SIZE}'}
        - {name: ENABLE_VMAAS_CACHE, value: '${ENABLE_VMAAS_CACHE_EVALUATOR_RECALC}'}
        - {name: VMAAS_CACHE_SIZE, value: '${VMAAS_CACHE_SIZE}'}
        - {name: VMAAS_CALL_MAX_RETRIES, value: '${VMAAS_CALL_MAX_RETRIES}'}
        - {name: VMAAS_CALL_USE_EXP_RETRY, value: '${VMAAS_CALL_USE_EXP_RETRY}'}
        - {name: VMAAS_CALL_USE_OPTIMISTIC_UPDATES, value: '${VMAAS_CALL_USE_OPTIMISTIC_UPDATES}'}
        - {name: MSG_BATCH_SIZE, value: '${MSG_BATCH_SIZE}'}
        - {name: MAX_EVAL_GOROUTINES, value: '${MAX_EVAL_GOROUTINES_RECALC}'}
        - {name: ENABLE_PAYLOAD_TRACKER, value: 'false'}  # we don't need to send payload tracker messages from recalc
        - {name: ENABLE_INSTANT_NOTIFICATIONS, value: '${ENABLE_INSTANT_NOTIFICATIONS}'}
        - {name: USE_VMAAS_GO, value: '${USE_VMAAS_GO}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: GOGC, value: '${GOGC}'}  # set garbage collection limit for go 1.18
        - {name: ENABLE_PROFILER, value: '${ENABLE_PROFILER_EVALUATOR_RECALC}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_EVALUATOR_RECALC}', memory: '${RES_LIMIT_MEM_EVALUATOR_RECALC}'}
          requests: {cpu: '${RES_REQUEST_CPU_EVALUATOR_RECALC}', memory: '${RES_REQUEST_MEM_EVALUATOR_RECALC}'}

    jobs:
    - name: vmaas-sync
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${VMAAS_SYNC_SCHEDULE}
      suspend: ${{VMAAS_SYNC_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - vmaas_sync
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: SHOW_CLOWDER_VARS, value: ''}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                       key: vmaas-sync-database-password}}}
        - {name: KAFKA_GROUP, value: patchman}
        - {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '${KAFKA_WRITER_MAX_ATTEMPTS}'}
        - {name: EVAL_TOPIC, value: patchman.evaluator.recalc}
        - {name: ENABLE_REPO_BASED_RE_EVALUATION, value: '${ENABLE_REPO_BASED_RE_EVALUATION}'}
        - {name: ENABLE_RECALC_MESSAGES_SEND, value: '${ENABLE_RECALC_MESSAGES_SEND}'}
        - {name: ENABLE_ADVISORIES_SYNC, value: '${ENABLE_ADVISORIES_SYNC}'}
        - {name: ENABLE_PACKAGES_SYNC, value: '${ENABLE_PACKAGES_SYNC}'}
        - {name: ENABLE_REPOS_SYNC, value: '${ENABLE_REPOS_SYNC}'}
        - {name: ENABLE_MODIFIED_SINCE_SYNC, value: '${ENABLE_MODIFIED_SINCE_SYNC}'}
        - {name: ERRATA_PAGE_SIZE, value: '${ERRATA_PAGE_SIZE}'}
        - {name: PACKAGES_PAGE_SIZE, value: '${PACKAGES_PAGE_SIZE}'}
        - {name: ENABLE_CYNDI_METRICS, value: '${ENABLE_CYNDI_METRICS}'}
        - {name: MSG_BATCH_SIZE, value: '${MSG_BATCH_SIZE}'}
        - {name: PROMETHEUS_PUSHGATEWAY,value: '${PROMETHEUS_PUSHGATEWAY}'}
        - {name: FULL_SYNC_CADENCE,value: '${FULL_SYNC_CADENCE}'}
        - {name: SSL_CERT_DIR, value: '${SSL_CERT_DIR}'}
        - {name: USE_VMAAS_GO, value: '${USE_VMAAS_GO}'}
        resources:
          limits: {cpu: '${RES_LIMIT_CPU_VMAAS_SYNC}', memory: '${RES_LIMIT_MEM_VMAAS_SYNC}'}
          requests: {cpu: '${RES_REQUEST_CPU_VMAAS_SYNC}', memory: '${RES_REQUEST_MEM_VMAAS_SYNC}'}

    - name: system-culling
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${CULLING_SCHEDULE}
      suspend: ${{CULLING_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - system_culling
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: DELETE_CULLED_SYSTEMS_LIMIT, value: '${DELETE_CULLED_SYSTEMS_LIMIT}'}
        - {name: ENABLE_CULLED_SYSTEM_DELETE, value: '${ENABLE_CULLED_SYSTEM_DELETE}'}
        - {name: ENABLE_SYSTEM_STALING, value: '${ENABLE_SYSTEM_STALING}'}
        - {name: PROMETHEUS_PUSHGATEWAY,value: '${PROMETHEUS_PUSHGATEWAY}'}

    - name: package-refresh
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${PKG_REFRESH_SCHEDULE}
      suspend: ${{PKG_REFRESH_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - packages_cache_refresh
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_PKG_REFRESH}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}

    - name: advisory-refresh
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${ADVISORY_REFRESH_SCHEDULE}
      suspend: ${{ADVISORY_REFRESH_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - advisory_cache_refresh
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: ENABLE_REFRESH_ADVISORY_CACHES, value: '${ENABLE_REFRESH_ADVISORY_CACHES}'}
        - {name: SKIP_N_ACCOUNTS_REFRESH, value: '${SKIP_N_ACCOUNTS_REFRESH}'}

    - name: delete-unused
      activeDeadlineSeconds: ${{JOBS_TIMEOUT}}
      schedule: ${DELETE_UNUSED_SCHEDULE}
      suspend: ${{DELETE_UNUSED_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG_JOBS}
        initContainers:
          - name: check-for-db
            image: ${IMAGE}:${IMAGE_TAG_DATABASE_ADMIN}
            command:
              - ./database_admin/check-upgraded.sh
            env:
            - {name: SCHEMA_MIGRATION, value: '${SCHEMA_MIGRATION}'}
        command:
          - ./scripts/entrypoint.sh
          - job
          - delete_unused
        env:
        - {name: LOG_LEVEL, value: '${LOG_LEVEL_JOBS}'}
        - {name: GOMAXPROCS, value: '${GOMAXPROCS_JOBS}'}
        - {name: GIN_MODE, value: '${GIN_MODE}'}
        - {name: DB_DEBUG, value: '${DB_DEBUG_JOBS}'}
        - {name: DB_USER, value: vmaas_sync}
        - {name: DB_PASSWD, valueFrom: {secretKeyRef: {name: patchman-engine-database-passwords,
                                                      key: vmaas-sync-database-password}}}
        - {name: DELETE_UNUSED_DATA_LIMIT, value: '${DELETE_UNUSED_DATA_LIMIT}'}
        - {name: ENABLE_UNUSED_DATA_DELETE, value: '${ENABLE_UNUSED_DATA_DELETE}'}

    database:
      name: patchman
      version: 12

    kafkaTopics:
    - {replicas: 3, partitions: 10, topicName: platform.inventory.events}
    - {replicas: 3, partitions: 10, topicName: patchman.evaluator.upload}
    - {replicas: 3, partitions: 10, topicName: patchman.evaluator.recalc}
    - {replicas: 3, partitions: 8, topicName: platform.payload-status}
    - {replicas: 3, partitions: 10, topicName: platform.remediation-updates.patch}
    - {replicas: 3, partitions: 10, topicName: platform.notifications.ingress}

    dependencies:
    - host-inventory
    - rbac
    - vmaas
    - ingress
    - puptoo
    cyndi:
      enabled: true
      appName: patch
      insightsOnly: true
    testing:
      iqePlugin: patchman

- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: patchman
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    logLevel: ${FLOORIST_LOGLEVEL}
    queries:
      - prefix: insights/patch/advisories
        query: >-
          SELECT ra.name AS rh_account_id, am.name AS advisory_name, at.name AS advisory_type,
          count(sp.inventory_id) as applicable_systems
          FROM system_advisories sa
          JOIN system_platform sp ON sa.rh_account_id = sp.rh_account_id AND sa.system_id = sp.id
          JOIN inventory.hosts ih ON sp.inventory_id = ih.id
          JOIN advisory_metadata am ON sa.advisory_id = am.id
          JOIN rh_account ra ON ra.id = sa.rh_account_id
          JOIN advisory_type at ON am.advisory_type_id = at.id
          GROUP BY ra.name, am.name, at.name
          ORDER BY ra.name ASC, applicable_systems DESC;


- apiVersion: v1
  kind: Secret
  metadata:
    name: patchman-engine-database-passwords
    namespace: test  # namespace is overwritten by bonfire
  type: Opaque
  data:
    manager-database-password: bWFuYWdlcg== # manager
    listener-database-password: bGlzdGVuZXI= # listener
    evaluator-database-password: ZXZhbHVhdG9y # evaluator
    vmaas-sync-database-password: dm1hYXMtc3luYw== # vmaas-sync
    cyndi-database-password: Y3luZGk= # cyndi

- apiVersion: v1
  data:
    db.host: ""
    db.port: "MA=="
  kind: Secret
  metadata:
    name: patchman-db-readonly
    namespace: test  # namespace is overwritten by bonfire
  type: Opaque

parameters:
# Manager
- {name: REPLICAS_MANAGER, value: '1'}
- {name: IMAGE_TAG_MANAGER, value: v3.3.1}
- {name: LOG_LEVEL_MANAGER, value: debug}
- {name: GOMAXPROCS_MANAGER, value: '8'}
- {name: DB_DEBUG_MANAGER, value: 'false'} # Log database queries if enabled
- {name: ENABLE_CYNDI_TAGS, value: 'true'} # Enable filtering with Cyndi tags
- {name: ENABLE_RBAC, value: 'true'} # Enable requesting RBAC service
- {name: DISABLE_CACHE_COUNTS, value: 'false'} # Don't use advisory cache counts
- {name: ENABLE_ADVISORY_DETAIL_CACHE, value: 'true'} # Use LRU cache in advisory detail endpoint
- {name: ADVISORY_DETAIL_CACHE_SIZE, value: '100'} # Advisory detail cache size (cached items count)
- {name: PRELOAD_ADVISORY_DETAIL_CACHE, value: 'true'} # Enable advisory detail cache preloading
- {name: ENABLE_BASELINES_API, value: 'true'} # Enable baselines API endpoints
- {name: ENABLE_BASELINE_CHANGE_EVAL, value: 'true'} # Send Kafka eval messages on baseline update
- {name: ENABLE_PACKAGE_CACHE_MANAGER, value: 'true'} # Enable caching for /packages endpoint
- {name: EVAL_TOPIC_MANAGER, value: patchman.evaluator.upload}
- {name: RES_LIMIT_CPU_MANAGER, value: 200m}
- {name: RES_LIMIT_MEM_MANAGER, value: 256Mi}
- {name: RES_REQUEST_CPU_MANAGER, value: 200m}
- {name: RES_REQUEST_MEM_MANAGER, value: 256Mi}
- {name: RESPONSE_TIMEOUT, value: '60'}
- {name: DB_READ_REPLICA_ENABLED, value: 'TRUE'}
- {name: ENABLE_PROFILER_MANAGER, value: 'false'}

# Listener
- {name: REPLICAS_LISTENER, value: '1'}
- {name: IMAGE_TAG_LISTENER, value: v3.3.1}
- {name: LOG_LEVEL_LISTENER, value: debug}
- {name: GOMAXPROCS_LISTENER, value: '8'}
- {name: DB_DEBUG_LISTENER, value: 'false'}
- {name: CONSUMER_COUNT_LISTENER, value: '8'}
- {name: ENABLE_BYPASS_LISTENER, value: 'false'} # Enable only bypass (fake) messages processing
- {name: EXCLUDED_REPORTERS, value: 'yupana'} # Comma-separated list of reporters to exclude from processing
- {name: EXCLUDED_HOST_TYPES, value: 'edge'} # Comma-separated list of host types to exclude from processing
- {name: RES_LIMIT_CPU_LISTENER, value: 250m}
- {name: RES_LIMIT_MEM_LISTENER, value: 256Mi}
- {name: RES_REQUEST_CPU_LISTENER, value: 250m}
- {name: RES_REQUEST_MEM_LISTENER, value: 256Mi}
- {name: ENABLE_PROFILER_LISTENER, value: 'false'}

# Evaluator
- {name: USE_VMAAS_GO, value: 'false'}
- {name: GOGC, value: '25'}

# Evaluator - upload
- {name: REPLICAS_EVALUATOR_UPLOAD, value: '1'}
- {name: IMAGE_TAG_EVALUATOR_UPLOAD, value: v3.3.1}
- {name: LOG_LEVEL_EVALUATOR_UPLOAD, value: debug}
- {name: GOMAXPROCS_EVALUATOR_UPLOAD, value: '8'}
- {name: DB_DEBUG_EVALUATOR_UPLOAD, value: 'false'}
- {name: CONSUMER_COUNT_EVALUATOR_UPLOAD, value: '8'}
- {name: ENABLE_BYPASS_EVALUATOR_UPLOAD, value: 'false'} # Enable only bypass (fake) messages processing
- {name: ENABLE_LAZY_PACKAGE_SAVE_EVALUATOR_UPLOAD, value: 'false'} # Enable unknown EVRAs saving during the evaluation
- {name: ENABLE_BASELINE_EVAL_EVALUATOR_UPLOAD, value: 'true'} # Take baselines into account during the evaluation
- {name: ENABLE_ADVISORY_ANALYSIS_SAVE_EVALUATOR_UPLOAD, value: 'true'}
- {name: ENABLE_PACKAGE_ANALYSIS_SAVE_EVALUATOR_UPLOAD, value: 'true'}
- {name: ENABLE_REPO_ANALYSIS_SAVE_EVALUATOR_UPLOAD, value: 'true'}
- {name: ENABLE_STALE_SYSTEM_EVALUATION_SAVE_EVALUATOR_UPLOAD, value: 'true'}
- {name: ENABLE_PACKAGE_CACHE_EVALUATOR_UPLOAD, value: 'true'}
- {name: PRELOAD_PACKAGE_CACHE_EVALUATOR_UPLOAD, value: 'true'}
- {name: ENABLE_VMAAS_CACHE_EVALUATOR_UPLOAD, value: 'true'}
- {name: RES_LIMIT_CPU_EVALUATOR_UPLOAD, value: 256m}
- {name: RES_LIMIT_MEM_EVALUATOR_UPLOAD, value: 1024Mi}
- {name: RES_REQUEST_CPU_EVALUATOR_UPLOAD, value: 256m}
- {name: RES_REQUEST_MEM_EVALUATOR_UPLOAD, value: 1024Mi}
- {name: MAX_EVAL_GOROUTINES_UPLOAD, value: '1'}
- {name: ENABLE_INSTANT_NOTIFICATIONS, value: 'true'}
- {name: VMAAS_CACHE_SIZE, value: '10000'}
- {name: ENABLE_PROFILER_EVALUATOR_UPLOAD, value: 'false'}

# Evaluator - recalc
- {name: REPLICAS_EVALUATOR_RECALC, value: '1'}
- {name: IMAGE_TAG_EVALUATOR_RECALC, value: v3.3.1}
- {name: LOG_LEVEL_EVALUATOR_RECALC, value: debug}
- {name: GOMAXPROCS_EVALUATOR_RECALC, value: '8'}
- {name: DB_DEBUG_EVALUATOR_RECALC, value: 'false'}
- {name: CONSUMER_COUNT_EVALUATOR_RECALC, value: '8'}
- {name: ENABLE_BYPASS_EVALUATOR_RECALC, value: 'false'} # Enable only bypass (fake) messages processing
- {name: ENABLE_LAZY_PACKAGE_SAVE_EVALUATOR_RECALC, value: 'false'} # Enable unknown EVRAs saving during the evaluation
- {name: ENABLE_BASELINE_EVAL_EVALUATOR_RECALC, value: 'true'} # Take baselines into account during the evaluation
- {name: ENABLE_ADVISORY_ANALYSIS_SAVE_EVALUATOR_RECALC, value: 'true'}
- {name: ENABLE_PACKAGE_ANALYSIS_SAVE_EVALUATOR_RECALC, value: 'true'}
- {name: ENABLE_REPO_ANALYSIS_SAVE_EVALUATOR_RECALC, value: 'true'}
- {name: ENABLE_STALE_SYSTEM_EVALUATION_SAVE_EVALUATOR_RECALC, value: 'true'}
- {name: ENABLE_PACKAGE_CACHE_EVALUATOR_RECALC, value: 'true'}
- {name: PRELOAD_PACKAGE_CACHE_EVALUATOR_RECALC, value: 'true'}
- {name: ENABLE_VMAAS_CACHE_EVALUATOR_RECALC, value: 'true'}
- {name: RES_LIMIT_CPU_EVALUATOR_RECALC, value: 256m}
- {name: RES_LIMIT_MEM_EVALUATOR_RECALC, value: 1024Mi}
- {name: RES_REQUEST_CPU_EVALUATOR_RECALC, value: 256m}
- {name: RES_REQUEST_MEM_EVALUATOR_RECALC, value: 1024Mi}
- {name: MAX_EVAL_GOROUTINES_RECALC, value: '1'}
- {name: ENABLE_INSTANT_NOTIFICATIONS, value: 'true'}
- {name: ENABLE_PROFILER_EVALUATOR_RECALC, value: 'false'}

# JOBS
- {name: IMAGE_TAG_JOBS, value: v3.3.1}
- {name: LOG_LEVEL_JOBS, value: debug}
- {name: GOMAXPROCS_JOBS, value: '8'}
- {name: GOMAXPROCS_PKG_REFRESH, value: '1'}
- {name: DB_DEBUG_JOBS, value: 'false'}
- {name: JOBS_TIMEOUT, value: '1800'}  # 30 min timeout for jobs
- {name: PROMETHEUS_PUSHGATEWAY, required: true, value: "pushgateway"}

# VMaaS sync
- {name: VMAAS_SYNC_SCHEDULE, value: '*/5 * * * *'} # Cronjob schedule definition
- {name: VMAAS_SYNC_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: ENABLE_REPO_BASED_RE_EVALUATION, value: 'true'} # Optimize re-evaluation using repositories
- {name: ENABLE_RECALC_MESSAGES_SEND, value: 'true'} # Send re-calc messages after sync
- {name: ENABLE_ADVISORIES_SYNC, value: 'true'} # Enable advisories sync - part of sync process.
- {name: ENABLE_PACKAGES_SYNC, value: 'true'} # Enable packages sync - part of sync process.
- {name: ENABLE_REPOS_SYNC, value: 'true'} # Enable repos sync - part of sync process.
- {name: ENABLE_MODIFIED_SINCE_SYNC, value: 'false'} # Enable incremental sync using 'modified_since' param.
- {name: ERRATA_PAGE_SIZE, value: '500'} # Requested Vmaas response page size for advisories sync
- {name: PACKAGES_PAGE_SIZE, value: '5'} # Requested Vmaas response page size for packages sync
- {name: ENABLE_CYNDI_METRICS, value: 'true'} # Calculate and expose metrics about Cyndi data
- {name: RES_LIMIT_CPU_VMAAS_SYNC, value: 500m}
- {name: RES_LIMIT_MEM_VMAAS_SYNC, value: 384Mi}
- {name: RES_REQUEST_CPU_VMAAS_SYNC, value: 500m}
- {name: RES_REQUEST_MEM_VMAAS_SYNC, value: 384Mi}
- {name: FULL_SYNC_CADENCE, value: '168'}  # run full vmaas sync (default: 168h)
# Delete unused data
- {name: DELETE_UNUSED_SCHEDULE, value: '10 */6 * * *'} # Cronjob schedule definition
- {name: DELETE_UNUSED_SUSPEND, value: 'true'} # Disable cronjob execution
- {name: DELETE_UNUSED_DATA_LIMIT, value: '1000'}  # Unused data deletion limit
- {name: ENABLE_UNUSED_DATA_DELETE, value: 'true'} # Unused data feature switch
# System culling
- {name: CULLING_SCHEDULE, value: '*/10 * * * *'} # Cronjob schedule definition
- {name: CULLING_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: DELETE_CULLED_SYSTEMS_LIMIT, value: '1000'} # Culled systems deletion limit
- {name: ENABLE_CULLED_SYSTEM_DELETE, value: 'true'} # Enable deleting part of culling method
- {name: ENABLE_SYSTEM_STALING, value: 'true'} # Enable marking systems stale of culling method
# Cache refresh
- {name: PKG_REFRESH_SCHEDULE, value: '5 11-22 * * *'} # Cronjob schedule definition
- {name: PKG_REFRESH_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: ADVISORY_REFRESH_SCHEDULE, value: '*/15 * * * *'} # Cronjob schedule definition
- {name: ADVISORY_REFRESH_SUSPEND, value: 'false'} # Disable cronjob execution
- {name: ENABLE_REFRESH_ADVISORY_CACHES, value: 'true'} # Enable periodic refresh of account advisory caches
- {name: SKIP_N_ACCOUNTS_REFRESH, value: '0'} # Skip advisory cache refresh for N first accounts in case the previous refresh didn't finish

# Database admin
- {name: GOMAXPROCS_ADMIN, value: '8'}
- {name: IMAGE_TAG_DATABASE_ADMIN, value: v3.3.1}
- {name: LOG_LEVEL_DATABASE_ADMIN, value: debug}
- {name: DB_DEBUG_DATABASE_ADMIN, value: 'false'}
- {name: SCHEMA_MIGRATION, value: '-1'} # Set specific database schema version or use the last schema version (-1)
- {name: RESET_SCHEMA, value: 'false'} # Drop and recreate database schema, use SCHEMA_MIGRATION to create specific schema version
- {name: FORCE_SCHEMA_VERSION, value: ''} # Reset the dirty flag to false and force set the specific version, it will follow up with the schema upgrade defined by SCHEMA_MIGRATION
- {name: UPDATE_CYNDI_PASSWD, value: ''} # Do update cyndi database password, use "true" to enable it
- {name: RES_LIMIT_CPU_DATABASE_ADMIN, value: 100m}
- {name: RES_LIMIT_MEM_DATABASE_ADMIN, value: 128Mi}
- {name: RES_REQUEST_CPU_DATABASE_ADMIN, value: 100m}
- {name: RES_REQUEST_MEM_DATABASE_ADMIN, value: 128Mi}
- {name: UPDATE_USERS, value: 'false'} # set to true if we need to change user or passwords
- {name: UPDATE_DB_CONFIG, value: 'false'} # set to true if we need to load new './database_admin/config.sql'

# Common parameters
- {name: IMAGE, value: quay.io/cloudservices/patchman-engine-app}
- {name: ENV_NAME, required: false}
- {name: GIN_MODE, value: 'release'} # Gin webframework running mode
- {name: PACKAGE_CACHE_SIZE, value: '1000000'}
- {name: PACKAGE_NAME_CACHE_SIZE, value: '60000'}
- {name: KAFKA_READER_MAX_ATTEMPTS, value: '3'} # Limit of how many attempts will be made before kafka read error.
- {name: KAFKA_WRITER_MAX_ATTEMPTS, value: '10'} # Limit of how many attempts will be made before kafka write error.
- {name: VMAAS_CALL_MAX_RETRIES, value: '8'} # Limit of how many unsuccessful vmaas calls are allowed before panic.
- {name: VMAAS_CALL_USE_EXP_RETRY, value: 'true'} # Use exponential retry policy for vmaas call.
- {name: VMAAS_CALL_USE_OPTIMISTIC_UPDATES, value: 'true'} # Always use "optimistic_updates" in vmaas request (not only for third party usage).
- {name: MSG_BATCH_SIZE, value: '4000'} # BatchSize for PlatformEvent message
- {name: ENABLE_PAYLOAD_TRACKER, value: 'true'} # Send status messages to payload tracker
- {name: SSL_CERT_DIR, value: '/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:/cdapp/certs'}

# Turnpike
- {name: IMAGE_TAG_ADMIN, value: v3.3.1}
- {name: ENABLE_TURNPIKE_AUTH, value: 'true'} # Enable Turnpike authentication for internal API (manual sync, re-calc)
- {name: REPLICAS_ADMIN, value: '1'}
- {name: RES_LIMIT_CPU_ADMIN, value: 100m}
- {name: RES_LIMIT_MEM_ADMIN, value: 256Mi}
- {name: RES_REQUEST_CPU_ADMIN, value: 50m}
- {name: RES_REQUEST_MEM_ADMIN, value: 128Mi}

# Floorist parameters
- {name: FLOORIST_SUSPEND, value: 'true', required: true} # Disable Floorist cronjob execution
- {name: FLOORIST_BUCKET_SECRET_NAME, value: dummy-secret, required: true} # Bucket secret name
- {name: FLOORIST_DB_SECRET_NAME, value: patchman-db} # DB secret name
- {name: FLOORIST_LOGLEVEL, value: INFO} # Floorist loglevel config
