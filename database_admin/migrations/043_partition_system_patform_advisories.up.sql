
-- create partitioned tables
-- skip constraints to make initial import faster
CREATE TABLE IF NOT EXISTS system_platform_v2
(
    id                       INT GENERATED BY DEFAULT AS IDENTITY,
    inventory_id             UUID                     NOT NULL,
    rh_account_id            INT                      NOT NULL,
    first_reported           TIMESTAMP WITH TIME ZONE NOT NULL,
    vmaas_json               TEXT,
    json_checksum            TEXT,
    last_updated             TIMESTAMP WITH TIME ZONE NOT NULL,
    unchanged_since          TIMESTAMP WITH TIME ZONE NOT NULL,
    last_evaluation          TIMESTAMP WITH TIME ZONE,
    opt_out                  BOOLEAN                  NOT NULL DEFAULT FALSE,
    advisory_count_cache     INT                      NOT NULL DEFAULT 0,
    advisory_enh_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_bug_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_sec_count_cache INT                      NOT NULL DEFAULT 0,

    last_upload              TIMESTAMP WITH TIME ZONE,
    stale_timestamp          TIMESTAMP WITH TIME ZONE,
    stale_warning_timestamp  TIMESTAMP WITH TIME ZONE,
    culled_timestamp         TIMESTAMP WITH TIME ZONE,
    stale                    BOOLEAN                  NOT NULL DEFAULT false,
    display_name             TEXT                     NOT NULL CHECK (NOT empty(display_name)),
    packages_installed       INT                      NOT NULL DEFAULT 0,
    packages_updatable       INT                      NOT NULL DEFAULT 0,
    reporter_id              INT
) PARTITION BY HASH (rh_account_id);

SELECT create_table_partitions('system_platform_v2', 16,
                               $$WITH (fillfactor = '70', autovacuum_vacuum_scale_factor = '0.05')
                                 TABLESPACE pg_default$$);

-- system_advisories
CREATE TABLE IF NOT EXISTS system_advisories_v2
(
    rh_account_id  INT                      NOT NULL,
    system_id      INT                      NOT NULL,
    advisory_id    INT                      NOT NULL,
    first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
    when_patched   TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    status_id      INT                      DEFAULT 0
) PARTITION BY HASH (rh_account_id);

SELECT create_table_partitions('system_advisories_v2', 32,
                               $$WITH (fillfactor = '70', autovacuum_vacuum_scale_factor = '0.05')$$);

-- system_repo
ALTER TABLE system_repo
    ADD COLUMN rh_account_id INT,
    DROP CONSTRAINT system_platform_id;


-- data migration
DO
$$
    DECLARE
        rhacid NUMERIC;
        old NUMERIC;
        new NUMERIC;
    BEGIN
        FOR rhacid IN SELECT id from rh_account
        LOOP
            INSERT INTO system_platform_v2 (
                    id,
                    inventory_id,
                    rh_account_id,
                    first_reported,
                    vmaas_json,
                    json_checksum,
                    last_updated,
                    unchanged_since,
                    last_evaluation,
                    opt_out,
                    advisory_count_cache,
                    advisory_enh_count_cache,
                    advisory_bug_count_cache,
                    advisory_sec_count_cache,
                    last_upload,
                    stale_timestamp,
                    stale_warning_timestamp,
                    culled_timestamp,
                    stale,
                    display_name,
                    packages_installed,
                    packages_updatable,
                    reporter_id
                    )
                SELECT
                    id,
                    inventory_id::uuid,
                    rh_account_id,
                    first_reported,
                    vmaas_json,
                    json_checksum,
                    last_updated,
                    unchanged_since,
                    last_evaluation,
                    opt_out,
                    advisory_count_cache,
                    advisory_enh_count_cache,
                    advisory_bug_count_cache,
                    advisory_sec_count_cache,
                    last_upload,
                    stale_timestamp,
                    stale_warning_timestamp,
                    culled_timestamp,
                    stale,
                    display_name,
                    packages_installed,
                    packages_updatable,
                    reporter_id
                FROM system_platform
               WHERE rh_account_id = rhacid;
        END LOOP;
        SELECT count(*) from system_platform into old;
        SELECT count(*) from system_platform_v2 into new;
        RAISE NOTICE 'system_platform row count - old: %, new: %', old, new;
    END;
$$ LANGUAGE plpgsql;

DO
$$
    DECLARE
        rhacid NUMERIC;
        old NUMERIC;
        new NUMERIC;
    BEGIN
        FOR rhacid IN SELECT id from rh_account
        LOOP
            INSERT INTO system_advisories_v2 (
                    rh_account_id,
                    system_id,
                    advisory_id,
                    first_reported,
                    when_patched,
                    status_id
                    )
                SELECT
                    sp.rh_account_id,
                    sa.system_id,
                    sa.advisory_id,
                    sa.first_reported,
                    sa.when_patched,
                    sa.status_id
                FROM system_advisories sa
                JOIN system_platform sp
                  ON sp.id = sa.system_id
               WHERE sp.rh_account_id = rhacid;
        END LOOP;
        SELECT count(*) from system_advisories into old;
        SELECT count(*) from system_advisories_v2 into new;
        RAISE NOTICE 'system_platform row count - old: %, new: %', old, new;
    END;
$$ LANGUAGE plpgsql;

UPDATE system_repo sr
    SET rh_account_id = (SELECT sp.rh_account_id FROM system_platform sp WHERE sp.id = sr.system_id);

-- triger helper
CREATE OR REPLACE FUNCTION create_table_partition_triggers(name text, trig_type text, tbl regclass, trig_text text)
    RETURNS VOID AS
$$
DECLARE
    r record;
BEGIN
    FOR r IN SELECT child.relname
               FROM pg_inherits
               JOIN pg_class parent
                 ON pg_inherits.inhparent = parent.oid
               JOIN pg_class child
                 ON pg_inherits.inhrelid   = child.oid
              WHERE parent.relname = text(tbl)
    LOOP
        EXECUTE 'CREATE TRIGGER ' || name || substr(r.relname, length(text(tbl)) +1 ) ||
                ' ' || trig_type || ' ON ' || r.relname || ' ' || trig_text || ';';
    END LOOP;
END;
$$ LANGUAGE plpgsql;


-- enable constraints on new tables
ALTER TABLE system_platform_v2
    ADD PRIMARY KEY (rh_account_id, id),
    ADD UNIQUE (rh_account_id, inventory_id),
    ADD CONSTRAINT rh_account_id
        FOREIGN KEY (rh_account_id)
            REFERENCES rh_account (id),
    ADD CONSTRAINT reporter_id
        FOREIGN KEY (reporter_id)
            REFERENCES reporter (id);

SELECT create_table_partition_triggers('system_platform_set_first_reported',
                                       $$BEFORE INSERT$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE set_first_reported()$$);

SELECT create_table_partition_triggers('system_platform_set_last_updated',
                                       $$BEFORE INSERT OR UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE set_last_updated()$$);

SELECT create_table_partition_triggers('system_platform_check_unchanged',
                                       $$BEFORE INSERT OR UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE check_unchanged()$$);

SELECT create_table_partition_triggers('system_platform_on_update',
                                       $$AFTER UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE on_system_update()$$);
-- move sequence on new table
select setval('system_platform_v2_id_seq', nextval('system_platform_id_seq'), FALSE);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_platform_v2 TO listener;
-- evaluator needs to update last_evaluation
GRANT UPDATE ON system_platform_v2 TO evaluator;
-- manager needs to update cache and delete systems
GRANT UPDATE (advisory_count_cache,
              advisory_enh_count_cache,
              advisory_bug_count_cache,
              advisory_sec_count_cache), DELETE ON system_platform_v2 TO manager;

-- VMaaS sync needs to be able to perform system culling tasks
GRANT SELECT, UPDATE, DELETE ON system_platform_v2 to vmaas_sync;


ALTER TABLE system_advisories_v2
    ADD PRIMARY KEY (rh_account_id, system_id, advisory_id),
    ADD CONSTRAINT system_platform_id
        FOREIGN KEY (rh_account_id, system_id)
            REFERENCES system_platform_v2 (rh_account_id, id),
    ADD CONSTRAINT advisory_metadata_id
        FOREIGN KEY (advisory_id)
            REFERENCES advisory_metadata (id),
    ADD CONSTRAINT status_id
        FOREIGN KEY (status_id)
            REFERENCES status (id);

SELECT create_table_partition_triggers('system_advisories_set_first_reported',
                                       $$BEFORE INSERT$$,
                                       'system_advisories_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE set_first_reported()$$);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_advisories_v2 TO evaluator;
-- manager needs to be able to update things like 'status' on a sysid/advisory combination, also needs to delete
GRANT UPDATE, DELETE ON system_advisories_v2 TO manager;
-- manager needs to be able to update opt_out column
GRANT UPDATE (opt_out) ON system_platform_v2 TO manager;
-- listener deletes systems, TODO: temporary added evaluator permissions to listener
GRANT SELECT, INSERT, UPDATE, DELETE ON system_advisories_v2 TO listener;
-- vmaas_sync needs to delete culled systems, which cascades to system_advisories
GRANT SELECT, DELETE ON system_advisories_v2 TO vmaas_sync;

-- system_repo
ALTER TABLE system_repo
    ALTER COLUMN rh_account_id SET NOT NULL,
    ADD UNIQUE (rh_account_id, system_id, repo_id),
    DROP CONSTRAINT system_repo_system_id_repo_id_key,
    ADD CONSTRAINT system_platform_id
        FOREIGN KEY (rh_account_id, system_id)
            REFERENCES system_platform_v2 (rh_account_id, id);
DROP INDEX system_repo_system_id_idx;

GRANT SELECT, INSERT, UPDATE, DELETE ON system_repo TO listener;
GRANT DELETE ON system_repo TO manager;
GRANT SELECT ON system_repo TO evaluator;
GRANT SELECT, DELETE on system_repo to vmaas_sync;

-- user for evaluator component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO evaluator;

-- user for listener component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO listener;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO manager;

-- user for VMaaS sync component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO vmaas_sync;
