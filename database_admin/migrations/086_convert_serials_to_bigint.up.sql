DROP FUNCTION IF EXISTS refresh_latest_packages_view;
DROP INDEX IF EXISTS package_latest_cache_pkey;
DROP MATERIALIZED VIEW IF EXISTS package_latest_cache;

ALTER TABLE rh_account ALTER COLUMN id TYPE BIGINT;

ALTER TABLE advisory_metadata ALTER COLUMN id TYPE BIGINT;

ALTER TABLE advisory_account_data ALTER COLUMN rh_account_id type BIGINT;
ALTER TABLE advisory_account_data ALTER COLUMN advisory_id type BIGINT;

ALTER TABLE system_platform ALTER COLUMN id type BIGINT;

CREATE OR REPLACE FUNCTION system_advisories_count(system_id_in BIGINT, advisory_type_id_in INT DEFAULT NULL)
    RETURNS BIGINT AS
$system_advisories_count$
DECLARE
    result_cnt BIGINT;
BEGIN
    SELECT COUNT(advisory_id)
    FROM system_advisories sa
             JOIN advisory_metadata am ON sa.advisory_id = am.id
    WHERE (am.advisory_type_id = advisory_type_id_in OR advisory_type_id_in IS NULL)
      AND sa.system_id = system_id_in
      AND sa.when_patched IS NULL
    INTO result_cnt;
    RETURN result_cnt;
END;
$system_advisories_count$ LANGUAGE 'plpgsql';

CREATE TABLE IF NOT EXISTS system_platform_big
(
    id                       BIGINT GENERATED BY DEFAULT AS IDENTITY,
    inventory_id             UUID                     NOT NULL,
    rh_account_id            BIGINT                      NOT NULL,
    vmaas_json               TEXT                     CHECK (NOT empty(vmaas_json)),
    json_checksum            TEXT                     CHECK (NOT empty(json_checksum)),
    last_updated             TIMESTAMP WITH TIME ZONE NOT NULL,
    unchanged_since          TIMESTAMP WITH TIME ZONE NOT NULL,
    last_evaluation          TIMESTAMP WITH TIME ZONE,
    advisory_count_cache     INT                      NOT NULL DEFAULT 0,
    advisory_enh_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_bug_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_sec_count_cache INT                      NOT NULL DEFAULT 0,

    last_upload              TIMESTAMP WITH TIME ZONE,
    stale_timestamp          TIMESTAMP WITH TIME ZONE,
    stale_warning_timestamp  TIMESTAMP WITH TIME ZONE,
    culled_timestamp         TIMESTAMP WITH TIME ZONE,
    stale                    BOOLEAN                  NOT NULL DEFAULT false,
    display_name             TEXT                     NOT NULL CHECK (NOT empty(display_name)),
    packages_installed       INT                      NOT NULL DEFAULT 0,
    packages_updatable       INT                      NOT NULL DEFAULT 0,
    reporter_id              INT,
    third_party              BOOLEAN                  NOT NULL DEFAULT false,
    baseline_id              INT,
    baseline_uptodate        BOOLEAN,
    yum_updates              JSONB,
    PRIMARY KEY (rh_account_id, id),
    UNIQUE (rh_account_id, inventory_id),
    CONSTRAINT reporter_id   FOREIGN KEY (reporter_id) REFERENCES reporter (id),
    CONSTRAINT baseline_id   FOREIGN KEY (rh_account_id, baseline_id) REFERENCES baseline (rh_account_id, id),
    CONSTRAINT rh_account_id FOREIGN KEY (rh_account_id) REFERENCES rh_account (id)
) PARTITION BY HASH (rh_account_id);

SELECT create_table_partitions('system_platform_big', 16,
                               $$WITH (fillfactor = '70', autovacuum_vacuum_scale_factor = '0.05')
                                 TABLESPACE pg_default$$);

DROP TABLE IF EXISTS system_platform CASCADE;

SELECT rename_table_with_partitions('system_platform_big', 'system_platform_big', 'system_platform');

ALTER TABLE system_advisories ALTER COLUMN advisory_id TYPE BIGINT;
ALTER TABLE system_advisories ALTER COLUMN system_id TYPE BIGINT;

ALTER TABLE system_repo ALTER COLUMN repo_id TYPE BIGINT;
ALTER TABLE system_repo ALTER COLUMN system_id TYPE BIGINT;
ALTER TABLE system_repo ALTER COLUMN rh_account_id TYPE BIGINT;

ALTER TABLE package_name ALTER COLUMN id type BIGINT;

ALTER TABLE package ALTER COLUMN id TYPE BIGINT;
ALTER TABLE package ALTER COLUMN name_id TYPE BIGINT;
ALTER TABLE package ALTER COLUMN advisory_id TYPE BIGINT;

CREATE MATERIALIZED VIEW IF NOT EXISTS package_latest_cache
AS
SELECT DISTINCT ON (p.name_id) p.name_id, p.id as package_id, sum.value as summary
FROM package p
         LEFT JOIN strings sum on p.summary_hash = sum.id
         LEFT JOIN advisory_metadata am on p.advisory_id = am.id
ORDER BY p.name_id, am.public_date DESC NULLS LAST, sum.value DESC NULLS LAST;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE package_latest_cache TO vmaas_sync;

GRANT SELECT ON TABLE public.package_latest_cache TO evaluator;
GRANT SELECT ON TABLE public.package_latest_cache TO listener;
GRANT SELECT ON TABLE public.package_latest_cache TO manager;

CREATE UNIQUE INDEX IF NOT EXISTS package_latest_cache_pkey ON package_latest_cache (name_id);

REFRESH MATERIALIZED VIEW package_latest_cache;

CREATE OR REPLACE FUNCTION refresh_latest_packages_view()
    RETURNS void
    SECURITY DEFINER
AS $$
BEGIN
    REFRESH MATERIALIZED VIEW package_latest_cache WITH DATA;
    RETURN;
END;
$$ LANGUAGE plpgsql;

SELECT refresh_latest_packages_view();
