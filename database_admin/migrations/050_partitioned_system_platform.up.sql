CREATE OR REPLACE PROCEDURE raise_notice(notice text)
    AS
$$
BEGIN
    RAISE NOTICE '%', notice;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_table_partitions(tbl regclass, parts INTEGER, rest text)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'CREATE TABLE IF NOT EXISTS ' || text(tbl) || '_' || text(I) || ' PARTITION OF ' || text(tbl) ||
                    ' FOR VALUES WITH ' || ' ( MODULUS ' || text(parts) || ', REMAINDER ' || text(I) || ')' ||
                    rest || ';';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

CALL raise_notice('system_platform_v2 migration:');

-- create partitioned tables
-- skip constraints to make initial import faster
CREATE TABLE IF NOT EXISTS system_platform_v2
(
    id                       INT GENERATED BY DEFAULT AS IDENTITY,
    inventory_id             UUID                     NOT NULL,
    rh_account_id            INT                      NOT NULL,
    first_reported           TIMESTAMP WITH TIME ZONE NOT NULL,
    vmaas_json               TEXT,
    json_checksum            TEXT,
    last_updated             TIMESTAMP WITH TIME ZONE NOT NULL,
    unchanged_since          TIMESTAMP WITH TIME ZONE NOT NULL,
    last_evaluation          TIMESTAMP WITH TIME ZONE,
    opt_out                  BOOLEAN                  NOT NULL DEFAULT FALSE,
    advisory_count_cache     INT                      NOT NULL DEFAULT 0,
    advisory_enh_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_bug_count_cache INT                      NOT NULL DEFAULT 0,
    advisory_sec_count_cache INT                      NOT NULL DEFAULT 0,

    last_upload              TIMESTAMP WITH TIME ZONE,
    stale_timestamp          TIMESTAMP WITH TIME ZONE,
    stale_warning_timestamp  TIMESTAMP WITH TIME ZONE,
    culled_timestamp         TIMESTAMP WITH TIME ZONE,
    stale                    BOOLEAN                  NOT NULL DEFAULT false,
    display_name             TEXT                     NOT NULL CHECK (NOT empty(display_name)),
    packages_installed       INT                      NOT NULL DEFAULT 0,
    packages_updatable       INT                      NOT NULL DEFAULT 0,
    reporter_id              INT
) PARTITION BY HASH (rh_account_id);

SELECT create_table_partitions('system_platform_v2', 16,
                               $$WITH (fillfactor = '70', autovacuum_vacuum_scale_factor = '0.05')
                                 TABLESPACE pg_default$$);

CALL raise_notice('partitoned table created');


-- data migration
TRUNCATE TABLE system_platform_v2;
INSERT INTO system_platform_v2 (
        id,
        inventory_id,
        rh_account_id,
        first_reported,
        vmaas_json,
        json_checksum,
        last_updated,
        unchanged_since,
        last_evaluation,
        opt_out,
        advisory_count_cache,
        advisory_enh_count_cache,
        advisory_bug_count_cache,
        advisory_sec_count_cache,
        last_upload,
        stale_timestamp,
        stale_warning_timestamp,
        culled_timestamp,
        stale,
        display_name,
        packages_installed,
        packages_updatable,
        reporter_id
        )
    SELECT
        id,
        inventory_id::uuid,
        rh_account_id,
        first_reported,
        vmaas_json,
        json_checksum,
        last_updated,
        unchanged_since,
        last_evaluation,
        opt_out,
        advisory_count_cache,
        advisory_enh_count_cache,
        advisory_bug_count_cache,
        advisory_sec_count_cache,
        last_upload,
        stale_timestamp,
        stale_warning_timestamp,
        culled_timestamp,
        stale,
        display_name,
        packages_installed,
        packages_updatable,
        reporter_id
    FROM system_platform;

DO
$$
    DECLARE
        old NUMERIC;
        new NUMERIC;
    BEGIN
        SELECT count(*) from system_platform into old;
        SELECT count(*) from system_platform_v2 into new;
        RAISE NOTICE 'data migrated';
        RAISE NOTICE '    row count: %', old;
        RAISE NOTICE '_v2 row count: %', new;
    END;
$$ LANGUAGE plpgsql;

-- triger helper
CREATE OR REPLACE FUNCTION create_table_partition_triggers(name text, trig_type text, tbl regclass, trig_text text)
    RETURNS VOID AS
$$
DECLARE
    r record;
    trig_name text;
BEGIN
    FOR r IN SELECT child.relname
               FROM pg_inherits
               JOIN pg_class parent
                 ON pg_inherits.inhparent = parent.oid
               JOIN pg_class child
                 ON pg_inherits.inhrelid   = child.oid
              WHERE parent.relname = text(tbl)
    LOOP
        trig_name := name || substr(r.relname, length(text(tbl)) +1 );
        EXECUTE 'DROP TRIGGER IF EXISTS ' || trig_name || ' ON ' || r.relname;
        EXECUTE 'CREATE TRIGGER ' || trig_name ||
                ' ' || trig_type || ' ON ' || r.relname || ' ' || trig_text || ';';
    END LOOP;
END;
$$ LANGUAGE plpgsql;


-- enable constraints on new tables
ALTER TABLE system_platform_v2
    DROP CONSTRAINT IF EXISTS system_platform_v2_pkey,
    ADD PRIMARY KEY (rh_account_id, id),
    DROP CONSTRAINT IF EXISTS system_platform_v2_rh_account_id_inventory_id_key,
    ADD UNIQUE (rh_account_id, inventory_id),
    DROP CONSTRAINT IF EXISTS rh_account_id,
    ADD CONSTRAINT rh_account_id
        FOREIGN KEY (rh_account_id)
            REFERENCES rh_account (id),
    DROP CONSTRAINT IF EXISTS reporter_id,
    ADD CONSTRAINT reporter_id
        FOREIGN KEY (reporter_id)
            REFERENCES reporter (id);

CALL raise_notice('constraints created');

SELECT create_table_partition_triggers('system_platform_set_first_reported',
                                       $$BEFORE INSERT$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE set_first_reported()$$);

SELECT create_table_partition_triggers('system_platform_set_last_updated',
                                       $$BEFORE INSERT OR UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE set_last_updated()$$);

SELECT create_table_partition_triggers('system_platform_check_unchanged',
                                       $$BEFORE INSERT OR UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE check_unchanged()$$);

SELECT create_table_partition_triggers('system_platform_on_update',
                                       $$AFTER UPDATE$$,
                                       'system_platform_v2',
                                       $$FOR EACH ROW EXECUTE PROCEDURE on_system_update()$$);

CALL raise_notice('triggers created');

-- move sequence on new table
select setval('system_platform_v2_id_seq', nextval('system_platform_id_seq'), FALSE);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_platform_v2 TO listener;
-- evaluator needs to update last_evaluation
GRANT UPDATE ON system_platform_v2 TO evaluator;
-- manager needs to update cache and delete systems
GRANT UPDATE (advisory_count_cache,
              advisory_enh_count_cache,
              advisory_bug_count_cache,
              advisory_sec_count_cache), DELETE ON system_platform_v2 TO manager;

-- VMaaS sync needs to be able to perform system culling tasks
GRANT SELECT, UPDATE, DELETE ON system_platform_v2 to vmaas_sync;

CALL raise_notice('permission granted');
