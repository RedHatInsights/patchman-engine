CREATE OR REPLACE FUNCTION grant_table_partitions(perms text, tbl regclass, grantie text)
    RETURNS VOID AS
$$
DECLARE
    r record;
BEGIN
    FOR r IN SELECT child.relname
               FROM pg_inherits
               JOIN pg_class parent
                 ON pg_inherits.inhparent = parent.oid
               JOIN pg_class child
                 ON pg_inherits.inhrelid   = child.oid
              WHERE parent.relname = text(tbl)
    LOOP
        EXECUTE 'GRANT ' || perms || ' ON TABLE ' || r.relname || ' TO ' || grantie;
    END LOOP;
    EXECUTE 'GRANT ' || perms || ' ON TABLE ' || text(tbl) || ' TO ' || grantie;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS template
(
    id            BIGINT            GENERATED BY DEFAULT AS IDENTITY,
    rh_account_id INT               NOT NULL REFERENCES rh_account (id),
    uuid          UUID              NOT NULL,
    name          TEXT              NOT NULL CHECK (not empty(name)),
    description   TEXT              CHECK (NOT empty(description)),
    config        JSONB,
    creator       TEXT              CHECK (NOT empty(creator)),
    published     TIMESTAMP WITH TIME ZONE,
    last_edited   TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (rh_account_id, id),
    UNIQUE(rh_account_id, uuid)
) PARTITION BY HASH (rh_account_id);

SELECT create_table_partitions('template', 16,
                               $$WITH (fillfactor = '70', autovacuum_vacuum_scale_factor = '0.05')$$);

SELECT grant_table_partitions('SELECT', 'template', 'manager');
SELECT grant_table_partitions('SELECT, INSERT, UPDATE, DELETE', 'template', 'listener');
SELECT grant_table_partitions('SELECT', 'template', 'evaluator');
SELECT grant_table_partitions('SELECT', 'template', 'vmaas_sync');

GRANT SELECT,USAGE ON SEQUENCE public.template_id_seq TO evaluator;
GRANT SELECT,USAGE ON SEQUENCE public.template_id_seq TO listener;
GRANT SELECT,USAGE ON SEQUENCE public.template_id_seq TO vmaas_sync;

ALTER TABLE system_platform ADD COLUMN IF NOT EXISTS template_id BIGINT;
ALTER TABLE system_platform ADD CONSTRAINT template_id
    FOREIGN KEY (rh_account_id, template_id) REFERENCES template (rh_account_id, id);
